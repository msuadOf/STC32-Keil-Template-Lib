C251 COMPILER V5.60.0,  STC32G_UART                                                        14/05/23  10:09:43  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_UART
OBJECT MODULE PLACED IN .\MDK\Obj\STC32G_UART.obj
COMPILER INVOKED BY: D:\Program\Keil_v5\C251\BIN\C251.EXE Driver\Src\STC32G_UART.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE
                    - INCDIR(.\Driver;.\Driver\Inc;.\Driver\Isr;.\CORE\Inc;.\bsp\include) DEBUG PRINT(.\MDK\List\STC32G_UART.lst) TABS(2) OBJ
                    -ECT(.\MDK\Obj\STC32G_UART.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include "STC32G_UART.h"
   14          //#include <string.h>
   15          
   16          //========================================================================
   17          //                               本地变量声明
   18          //========================================================================
   19          
   20          #ifdef UART1
   21          COMx_Define COM1;
   22          u8  UART_BUF_type TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
   23          u8  UART_BUF_type RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
   24          #endif
   25          #ifdef UART2
   26          COMx_Define COM2;
   27          u8  UART_BUF_type TX2_Buffer[COM_TX2_Lenth];  //发送缓冲
   28          u8  UART_BUF_type RX2_Buffer[COM_RX2_Lenth];  //接收缓冲
   29          #endif
   30          #ifdef UART3
   31          COMx_Define COM3;
   32          u8  UART_BUF_type TX3_Buffer[COM_TX3_Lenth];  //发送缓冲
   33          u8  UART_BUF_type RX3_Buffer[COM_RX3_Lenth];  //接收缓冲
   34          #endif
   35          #ifdef UART4
   36          COMx_Define COM4;
   37          u8  UART_BUF_type TX4_Buffer[COM_TX4_Lenth];  //发送缓冲
   38          u8  UART_BUF_type RX4_Buffer[COM_RX4_Lenth];  //接收缓冲
   39          #endif
   40          
   41          //========================================================================
   42          // 函数: UART_Configuration
   43          // 描述: UART初始化程序.
   44          // 参数: UARTx: UART组号, COMx结构参数,请参考UART.h里的定义.
   45          // 返回: none.
   46          // 版本: V1.0, 2012-10-22
   47          //========================================================================
   48          u8 UART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
   49          {
   50   1      #if  defined( UART1 ) || defined( UART2 ) || defined( UART3 ) || defined( UART4 )
   51   1        u16 i;
   52   1        u32 j;
   53   1      #else
                 UARTx = NULL;
                 COMx = NULL;
               #endif
   57   1      
C251 COMPILER V5.60.0,  STC32G_UART                                                        14/05/23  10:09:43  PAGE 2   

   58   1      #ifdef UART1
   59   1        if(UARTx == UART1)
   60   1        {
   61   2          COM1.id = 1;
   62   2          COM1.TX_read    = 0;
   63   2          COM1.TX_write   = 0;
   64   2          COM1.B_TX_busy  = 0;
   65   2          COM1.RX_Cnt     = 0;
   66   2          COM1.RX_TimeOut = 0;
   67   2          COM1.B_RX_OK    = 0;
   68   2          
   69   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
   70   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
   71   2      //    memset(TX1_Buffer,0,COM_TX1_Lenth);
   72   2      //    memset(RX1_Buffer,0,COM_RX1_Lenth);
   73   2      
   74   2          SCON = (SCON & 0x3f) | COMx->UART_Mode; //模式设置
   75   2          if((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx))  //可变波特率
   76   2          {
   77   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
   78   3            if(j >= 65536UL)  return FAIL;  //错误
   79   3            j = 65536UL - j;
   80   3            if(COMx->UART_BRT_Use == BRT_Timer2)
   81   3            {
   82   4              T2R = 0;    //Timer stop
   83   4              S1BRT = 1;  //S1 BRT Use Timer2;
   84   4              T2_CT = 0;  //Timer2 set As Timer
   85   4              T2x12 = 1;  //Timer2 set as 1T mode
   86   4              T2H = (u8)(j>>8);
   87   4              T2L = (u8)j;
   88   4              T2R = 1;    //Timer run enable
   89   4            }
   90   3            else
   91   3            {
   92   4              TR1 = 0;
   93   4              S1BRT = 0;    //S1 BRT Use Timer1;
   94   4              T1_CT = 0;    //Timer1 set As Timer
   95   4              TMOD &= ~0x30;//Timer1_16bitAutoReload;
   96   4              T1x12 = 1;    //Timer1 set as 1T mode
   97   4              TH1 = (u8)(j>>8);
   98   4              TL1 = (u8)j;
   99   4              TR1  = 1;
  100   4            }
  101   3          }
  102   2          else if(COMx->UART_Mode == UART_ShiftRight)
  103   2          {
  104   3            if(COMx->BaudRateDouble == ENABLE)  S1M0x6 = 1; //固定波特率SysClk/2
  105   3            else                S1M0x6 = 0; //固定波特率SysClk/12
  106   3          }
  107   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  108   2          {
  109   3            if(COMx->BaudRateDouble == ENABLE)  SMOD = 1; //固定波特率SysClk/32
  110   3            else                SMOD = 0; //固定波特率SysClk/64
  111   3          }
  112   2          UART1_RxEnable(COMx->UART_RxEnable);  //UART接收使能
  113   2      
  114   2          return SUCCESS;
  115   2        }
  116   1      #endif
  117   1      #ifdef UART2
  118   1        if(UARTx == UART2)
  119   1        {
  120   2          COM2.id = 2;
  121   2          COM2.TX_read    = 0;
  122   2          COM2.TX_write   = 0;
  123   2          COM2.B_TX_busy  = 0;
C251 COMPILER V5.60.0,  STC32G_UART                                                        14/05/23  10:09:43  PAGE 3   

  124   2          COM2.RX_Cnt     = 0;
  125   2          COM2.RX_TimeOut = 0;
  126   2          COM2.B_RX_OK    = 0;
  127   2      
  128   2          for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
  129   2          for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
  130   2      
  131   2          S2CON = (S2CON & 0x3f) | COMx->UART_Mode; //模式设置
  132   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  133   2          {
  134   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  135   3            if(j >= 65536UL)  return FAIL;  //错误
  136   3            j = 65536UL - j;
  137   3            T2R = 0;    //Timer stop
  138   3            T2_CT = 0;  //Timer2 set As Timer
  139   3            T2x12 = 1;  //Timer2 set as 1T mode
  140   3            T2H = (u8)(j>>8);
  141   3            T2L = (u8)j;
  142   3            T2R = 1;    //Timer run enable
  143   3          }
  144   2          else  return FAIL;  //模式错误
  145   2          UART2_RxEnable(COMx->UART_RxEnable);  //UART接收使能
  146   2      
  147   2          return SUCCESS;
  148   2        }
  149   1      #endif
  150   1      #ifdef UART3
  151   1        if(UARTx == UART3)
  152   1        {
  153   2          COM3.id = 3;
  154   2          COM3.TX_read    = 0;
  155   2          COM3.TX_write   = 0;
  156   2          COM3.B_TX_busy  = 0;
  157   2          COM3.RX_Cnt     = 0;
  158   2          COM3.RX_TimeOut = 0;
  159   2          COM3.B_RX_OK    = 0;
  160   2          for(i=0; i<COM_TX3_Lenth; i++)  TX3_Buffer[i] = 0;
  161   2          for(i=0; i<COM_RX3_Lenth; i++)  RX3_Buffer[i] = 0;
  162   2      
  163   2          if((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx))  //可变波特率
  164   2          {
  165   3            if(COMx->UART_Mode == UART_9bit_BRTx) S3_9bit();  //9bit
  166   3            else                  S3_8bit();  //8bit
  167   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  168   3            if(j >= 65536UL)  return FAIL;  //错误
  169   3            j = 65536UL - j;
  170   3            if(COMx->UART_BRT_Use == BRT_Timer2)
  171   3            {
  172   4              T2R = 0;    //Timer stop
  173   4              S3_BRT_UseTimer2(); //S3 BRT Use Timer2;
  174   4              T2_CT = 0;  //Timer2 set As Timer
  175   4              T2x12 = 1;  //Timer2 set as 1T mode
  176   4              T2H = (u8)(j>>8);
  177   4              T2L = (u8)j;
  178   4              T2R = 1;    //Timer run enable
  179   4            }
  180   3            else
  181   3            {
  182   4              T3R = 0;    //Timer stop
  183   4              S3_BRT_UseTimer3();   //S3 BRT Use Timer3;
  184   4              T3H = (u8)(j>>8);
  185   4              T3L = (u8)j;
  186   4              T3_CT = 0;  //Timer3 set As Timer
  187   4              T3x12 = 1;  //Timer3 set as 1T mode
  188   4              T3R = 1;    //Timer run enable
  189   4            }
C251 COMPILER V5.60.0,  STC32G_UART                                                        14/05/23  10:09:43  PAGE 4   

  190   3          }
  191   2          else  return FAIL;  //模式错误
  192   2          UART3_RxEnable(COMx->UART_RxEnable);  //UART接收使能
  193   2      
  194   2          return SUCCESS;
  195   2        }
  196   1      #endif
  197   1      #ifdef UART4
  198   1        if(UARTx == UART4)
  199   1        {
  200   2          COM4.id = 4;
  201   2          COM4.TX_read    = 0;
  202   2          COM4.TX_write   = 0;
  203   2          COM4.B_TX_busy  = 0;
  204   2          COM4.RX_Cnt     = 0;
  205   2          COM4.RX_TimeOut = 0;
  206   2          COM4.B_RX_OK    = 0;
  207   2          for(i=0; i<COM_TX4_Lenth; i++)  TX4_Buffer[i] = 0;
  208   2          for(i=0; i<COM_RX4_Lenth; i++)  RX4_Buffer[i] = 0;
  209   2      
  210   2          if((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx))  //可变波特率
  211   2          {
  212   3            if(COMx->UART_Mode == UART_9bit_BRTx) S4_9bit();  //9bit
  213   3            else                  S4_8bit();  //8bit
  214   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  215   3            if(j >= 65536UL)  return FAIL;  //错误
  216   3            j = 65536UL - j;
  217   3            if(COMx->UART_BRT_Use == BRT_Timer2)
  218   3            {
  219   4              T2R = 0;    //Timer stop
  220   4              S4_BRT_UseTimer2(); //S4 BRT Use Timer2;
  221   4              T2_CT = 0;  //Timer2 set As Timer
  222   4              T2x12 = 1;  //Timer2 set as 1T mode
  223   4              T2H = (u8)(j>>8);
  224   4              T2L = (u8)j;
  225   4              T2R = 1;    //Timer run enable
  226   4            }
  227   3            else
  228   3            {
  229   4              T4R = 0;    //Timer stop
  230   4              S4_BRT_UseTimer4();   //S4 BRT Use Timer4;
  231   4              T4H = (u8)(j>>8);
  232   4              T4L = (u8)j;
  233   4              T4_CT = 0;  //Timer4 set As Timer
  234   4              T4x12 = 1;  //Timer4 set as 1T mode
  235   4              T4R = 1;    //Timer run enable
  236   4            }
  237   3          }
  238   2          else  return FAIL;  //模式错误
  239   2          UART4_RxEnable(COMx->UART_RxEnable);  //UART接收使能
  240   2          
  241   2          return SUCCESS;
  242   2        }
  243   1      #endif
  244   1        return FAIL;  //错误
  245   1      }
  246          
  247          /*********************************************************/
  248          
  249          /********************* UART1 函数 ************************/
  250          #ifdef UART1
  251          void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
  252          {
  253   1        SBUF = dat;
  254   1        COM1.B_TX_busy = 1;   //标志忙
  255   1        while(COM1.B_TX_busy);
C251 COMPILER V5.60.0,  STC32G_UART                                                        14/05/23  10:09:43  PAGE 5   

  256   1      }
  257          
  258          void PrintString1(u8 *puts)
  259          {
  260   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //遇到停止符0结束
  261   1      }
  262          
  263          #endif
  264          
  265          /********************* UART2 函数 ************************/
  266          #ifdef UART2
  267          void TX2_write2buff(u8 dat) //写入发送缓冲，指针+1
  268          {
  269   1        S2BUF = dat;
  270   1        COM2.B_TX_busy = 1;   //标志忙
  271   1        while(COM2.B_TX_busy);
  272   1      }
  273          
  274          void PrintString2(u8 *puts)
  275          {
  276   1          for (; *puts != 0;  puts++)  TX2_write2buff(*puts);   //遇到停止符0结束
  277   1      }
  278          
  279          #endif
  280          
  281          /********************* UART3 函数 ************************/
  282          #ifdef UART3
  283          void TX3_write2buff(u8 dat) //写入发送缓冲，指针+1
  284          {
  285   1        S3BUF = dat;
  286   1        COM3.B_TX_busy = 1;   //标志忙
  287   1        while(COM3.B_TX_busy);
  288   1      }
  289          
  290          void PrintString3(u8 *puts)
  291          {
  292   1          for (; *puts != 0;  puts++)  TX3_write2buff(*puts);   //遇到停止符0结束
  293   1      }
  294          
  295          #endif
  296          
  297          /********************* UART4 函数 ************************/
  298          #ifdef UART4
  299          void TX4_write2buff(u8 dat) //写入发送缓冲，指针+1
  300          {
  301   1        S4BUF = dat;
  302   1        COM4.B_TX_busy = 1;   //标志忙
  303   1        while(COM4.B_TX_busy);
  304   1      }
  305          
  306          void PrintString4(u8 *puts)
  307          {
  308   1          for (; *puts != 0;  puts++)  TX4_write2buff(*puts);   //遇到停止符0结束
  309   1      }
  310          
  311          #endif
  312          
  313          /*********************************************************/
  314          /*
  315          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
  316          {
  317            if(COMx->id == 1) TX1_write2buff(dat);
  318            if(COMx->id == 2) TX2_write2buff(dat);
  319            if(COMx->id == 3) TX3_write2buff(dat);
  320            if(COMx->id == 4) TX4_write2buff(dat);
  321          }
C251 COMPILER V5.60.0,  STC32G_UART                                                        14/05/23  10:09:43  PAGE 6   

  322          
  323          void PrintString(COMx_Define *COMx, u8 *puts)
  324          {
  325              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
  326          }
  327          */
  328          
  329          /********************* Printf 函数 ************************/
  330          #if(PRINTF_SELECT == 1)
               
               char putchar(char c)
               {
                 TX1_write2buff(c);
                 return c;
               }
               
               #elif(PRINTF_SELECT == 2)
  339          
  340          char putchar(char c)
  341          {
  342   1        TX2_write2buff(c);
  343   1        return c;
  344   1      }
  345          
  346          #elif(PRINTF_SELECT == 3)
               
               char putchar(char c)
               {
                 TX3_write2buff(c);
                 return c;
               }
               
               #elif(PRINTF_SELECT == 4)
               
               char putchar(char c)
               {
                 TX4_write2buff(c);
                 return c;
               }
               
               #endif


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1776     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       700     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
